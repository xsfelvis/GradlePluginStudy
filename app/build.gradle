import com.android.build.gradle.api.BaseVariant

import static org.codehaus.groovy.runtime.DefaultGroovyMethods.println

apply plugin: 'com.android.application'

apply plugin: 'com.dslplugin.createdslplugin'
apply plugin: 'com.dev.complexdsl'


apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: GreetingPlugin

apply plugin: 'com.learntransform.testtransform'


se {
    student {
        name "maheyusngdgf"
        phone "1223734634"
    }
    myName "seHhsgerg"
}

greet {
    message = "I am dynamic message"
}


android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.xsf.gradleplugintest"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


myExtension {
    extensionName "ddd" //简单属性
    innerExtension {//对象类型
        extensionName "innerExtension"
    }
    smallExtensions {//命名对象容器
        extension1 {
            extensionName "11"
        }
        extension2 {
            extensionName "22"
        }
    }
}

bookManager {
    libraries {
        Nanjing {
            libraryDetail "1111"
            bookCount 56000
        }
    }
    books {
        thinkingInJava {
            bookLocation libraries.Nanjing
        }
        JavaScript {
            bookLocation libraries.Nanjing
        }
        Go {
            bookLocation libraries.Nanjing
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


class GreetingPluginExtension {
    String message = "Hello from GreetingPlugin"
}

class GreetingPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        def extension = project.getExtensions().create('greet', GreetingPluginExtension.class)
        System.out.println("------------------GreetingTask开始----------------------")
        project.task('hello') {
            doLast {
                println extension.message
                def variants = (DomainObjectCollection<BaseVariant>) project.android.applicationVariants
                variants.each {
                    variant ->
                        def hello1 = "hello${variant.name.capitalize()}"
                        def hello2 = "hello${variant.buildType.name.capitalize()}"
                        System.out.println hello1
//                        println hello2
                }
//                System.out.println("------------------helloTask 结束----------------------->")
            }
        }


    }
}


//测试普通增量更新
task incremental {
    //设置inputs
    inputs.property("name", "hjy")
    inputs.property("age", 20)
    //设置outputs
    outputs.file("$buildDir/test.txt")

    doLast {
        System.out.println "exec task IncrementalUpdate"
    }
}

//测试带注解的增量更新
class SayHelloTask extends DefaultTask {

    //定义输入
    @Input
    String username
    @Input
    int age

    //定义输出
    @OutputDirectory
    File destDir

    @TaskAction
    void sayHello() {
        System.out.println "Hello $username ! age is $age"
    }

}

task testhello(type: SayHelloTask) {
    age = 19
    username = "hjy"
    destDir = file("$buildDir/test")
}

//ExtensionContainer
//父类
class Animal {

    String username
    int legs

    Animal(String name) {
        username = name
    }

    void setLegs(int c) {
        legs = c
    }

    String toString() {
        return "This animal is $username, it has ${legs} legs."
    }
}

//子类
class Pig extends Animal {

    int age
    String owner

    Pig(int age, String owner) {
        super("Pig")
        this.age = age
        this.owner = owner
    }

    String toString() {
        return super.toString() + " Its age is $age, its owner is $owner."
    }

}

//创建的Extension是 暴露出来Animal 类型,创建extension名称是name,该extension的类型是Pig，后面2个是参数
Animal aAnimal = getExtensions().create(Animal, "animal", Pig, 3, "hjy")
//创建的Extension是 Pig 类型
Pig aPig = getExtensions().create("pig", Pig, 5, "kobe")

animal {
    legs = 4    //配置属性
}

pig {
    setLegs 2   //这个是方法调用，也就是 setLegs(2)
}

task testExt doLast {
    System.out.println  aAnimal
    System.out.println aPig
    //验证 aPig 对象是 ExtensionAware 类型的
    System.out.println "aPig is a instance of ExtensionAware : ${aPig instanceof ExtensionAware}"
}

//嵌套Extension

class OuterExt {

    String outerName
    String msg
    InnerExt innerExt = new InnerExt()

    void outerName(String name) {
        outerName = name
    }

    void msg(String msg) {
        this.msg = msg
    }

    //创建内部Extension，名称为方法名 inner
    void inner(Action<InnerExt> action) {
        action.execute(inner)
    }

    //创建内部Extension，名称为方法名 inner
    void inner(Closure c) {
        org.gradle.util.ConfigureUtil.configure(c, innerExt)
    }

    String toString() {
        return "OuterExt[ name = ${outerName}, msg = ${msg}] " + innerExt
    }

}


class InnerExt {

    String innerName
    String msg

    void innerName(String name) {
        innerName = name
    }

    void msg(String msg) {
        this.msg = msg
    }

    String toString() {
        return "InnerExt[ name = ${innerName}, msg = ${msg}]"
    }

}

def outExt = getExtensions().create("outer", OuterExt)

outer {

    outerName "outer"
    msg "this is a outer message."

    inner {
        innerName "inner"
        msg "This is a inner message."
    }

}

task testNestExt doLast {
    System.out.println outExt
}
