import com.android.build.gradle.api.BaseVariant

import static org.codehaus.groovy.runtime.DefaultGroovyMethods.println

apply plugin: 'com.android.application'

apply plugin: 'com.dslplugin.createdslplugin'
apply plugin: 'com.dev.complexdsl'


apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: GreetingPlugin

apply plugin: 'com.learntransform.testtransform'


se {
    student {
        name "maheyusngdgf"
        phone "1223734634"
    }
    myName "seHhsgerg"
}

greet {
    message = "I am dynamic message"
}


android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.xsf.gradleplugintest"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


myExtension {
    extensionName "ddd" //简单属性
    innerExtension {//对象类型
        extensionName "innerExtension"
    }
    smallExtensions {//命名对象容器
        extension1 {
            extensionName "11"
        }
        extension2 {
            extensionName "22"
        }
    }
}

bookManager {
    libraries {
        Nanjing {
            libraryDetail "1111"
            bookCount 56000
        }
    }
    books {
        thinkingInJava {
            bookLocation libraries.Nanjing
        }
        JavaScript {
            bookLocation libraries.Nanjing
        }
        Go {
            bookLocation libraries.Nanjing
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


class GreetingPluginExtension {
    String message = "Hello from GreetingPlugin"
}

class GreetingPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        def extension = project.getExtensions().create('greet', GreetingPluginExtension.class)
        System.out.println("------------------helloTask开始----------------------")
        project.task('hello') {
            doLast {
                println extension.message
                def variants = (DomainObjectCollection<BaseVariant>) project.android.applicationVariants
                variants.each {
                    variant ->
                        def hello1 = "hello${variant.name.capitalize()}"
                        def hello2 = "hello${variant.buildType.name.capitalize()}"
                        println hello1
//                        println hello2
                }
//                System.out.println("------------------helloTask 结束----------------------->")
            }
        }


    }
}


//class SayHelloTask extends DefaultTask {
//    String msg = "default name"
//    int age = 20
//
//    @TaskAction
//    void sayHello() {
//        println "Hello $msg ! Age is ${age}"
//    }
//}
//
//task test1 doLast {
//    println "task test1 exec..."
//}
//task test2 doLast {
//    println "task test2 exec..."
//}
//task test3 doLast {
//    println "task test3 exec..."
//}
//
//task hello(type:SayHelloTask,group:"MyGroup")
//
////对task进行配置
//hello.configure {
//    println "hello task configure"
//    msg = "test"
//}
////获取task的名称
//println "task name is ${hello.getName()}"
////获取task的组名
//println "task group is ${hello.getGroup()}"
//
////设置task里的属性值，设置 age = 70
//hello.setProperty("age", 70)
////获取task里的某个属性值
//println "task msg is ${hello.property('msg')}"
//
////设置依赖的task，只有test1 task执行完后才会执行hello task
//hello.dependsOn(test1)
////设置终结者任务，执行完hello task之后会执行test2 task，通常可以用该方法做一些清理操作
//hello.finalizedBy(test2)
//
////如果同时执行hello、test3这2个task，会确保test3执行完之后才执行hello这个task，用这个来保证执行顺序
//hello.setMustRunAfter([test3])
//
////设置满足某个条件后才执行该task
//hello.setOnlyIf {
//    //只有当 age = 70 时，才会执行task，否则不会执行
//    return hello.property("age") == 70
//}

task incremental {
    //设置inputs
    inputs.property("name", "hjy")
    inputs.property("age", 20)
    //设置outputs
    outputs.file("$buildDir/test.txt")

    doLast {
        println "exec task IncrementalUpdate"
    }
}

class SayHelloTask extends DefaultTask {

    //定义输入
    @Input
    String username
    @Input
    int age

    //定义输出
    @OutputDirectory
    File destDir

    @TaskAction
    void sayHello() {
        println "Hello $username ! age is $age"
    }

}

task testhello(type: SayHelloTask) {
    age = 19
    username = "hjy"
    destDir = file("$buildDir/test")
}
